from dash import Dash, html, dash_table, dcc
from dash.dependencies import Input, Output
import plotly.express as px
import pandas as pd
import mysql.connector
import ssl

context = ssl.create_default_context()
context.check_hostname=False
context.verify_mode = ssl.CERT_NONE

my_db = mysql.connector.connect(
  host="localhost",
  user="root",
  password="JokkeSQL",
  database = "moviesRewards"
)

mycursor = my_db.cursor()
mycursor.execute("SELECT * FROM movies")
myresult = mycursor.fetchall()

column_names = [i[0] for i in mycursor.description]
df = pd.DataFrame(myresult, columns=column_names)
df['ratings'] = df['ratings'].str.extract(r'(\d+\.\d+)').astype(float)

print(df)
# exit()

# 2- run the Dash application

# 2a- Initialize the app
app = Dash(__name__)

# 2b- Decide the layout of your page
fig1 = px.histogram(df, x='title', y='ratings', histfunc='sum')
app.layout = html.Div([
        dash_table.DataTable(
            id='table',
            columns=[{"name": col, "id": col} for col in df.columns],
            data=df.to_dict('records'),
            row_selectable='single',
            selected_rows=[],
            page_size=10
    ),

    html.Div(id='movie-details', style={'whiteSpace': 'pre-line'}),
    
    dcc.Graph(figure=fig1)
])

@app.callback(
    Output('movie-details', 'children'),
    [Input('table', 'selected_rows'), Input('table', 'data')])

def display_movie_details(selected_rows, rows):
    if selected_rows:
        selected_row = selected_rows[0]
        movie = rows[selected_row]
        details = f"Title: {movie['title']}\nGenre: {movie['genre']}\nActors: {movie['actors']}\nAwards: {movie['awards']}"
        return details
    return "Select a movie to see details."

# 2c- start the HTTP server
app.run()
